# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker compose reference guide at
# https://docs.docker.com/compose/compose-file/

# Here the instructions define your application as a service called "app".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  dynamodb_local:
    command: "-jar DynamoDBLocal.jar -sharedDb -dbPath ./data"
    image: "amazon/dynamodb-local:latest"
    container_name: dynamodb-local
    user: root #Yikes.  Can't get to the db folder rn
    ports:
      - "8000:8000"
    volumes:
      - "./docker/dynamodb:/home/dynamodblocal/data"
    working_dir: /home/dynamodblocal
  backend:
    build:
      context: ./backend
    ports:
      - 4000:4000
    # If your application exposes a port, uncomment the following lines and change
    # the port numbers as needed. The first number is the host port and the second
    # is the port inside the container.
    # ports:
    #   - 8080:8080

    # The commented out section below is an example of how to define a PostgreSQL
    # database that your application can use. `depends_on` tells Docker Compose to
    # start the database before your application. The `db-data` volume persists the
    # database data between container restarts. The `db-password` secret is used
    # to set the database password. You must create `db/password.txt` and add
    # a password of your choosing to it before running `docker-compose up`.
    #     depends_on:
    #       db:
    #         condition: service_healthy
    #   db:
    #     image: postgres
    #     restart: always
    #     user: postgres
    #     secrets:
    #       - db-password
    #     volumes:
    #       - db-data:/var/lib/postgresql/data
    #     environment:
    #       - POSTGRES_DB=example
    #       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
    #     expose:
    #       - 5432
    #     healthcheck:
    #       test: [ "CMD", "pg_isready" ]
    #       interval: 10s
    #       timeout: 5s
    #       retries: 5
    # volumes:
    #   db-data:
    # secrets:
    #   db-password:
    #     file: db/password.txt

  # dynamodb_admin:
  #   image: aaronshaf/dynamodb-admin:dependabot_npm_and_yarn_aws-sdk-2.952.0
  #   container_name: app-dynamodb_admin
  #   ports:
  #     - "8001:8001"
  #   environment:
  #     - DYNAMO_ENDPOINT=http://localhost:8000
  #   depends_on:
  #     - dynamodb_local
  #   restart: unless-stopped

  # dynamodb_migrator:
  #   image: banst/awscli:1.18.76
  #   container_name: app-dynamodb_migrator
  #   working_dir: /home/dynamodblocal
  #   command: dynamodb create-table --cli-input-json file://product.json --endpoint-url http://dynamodb:8000
  #   volumes:
  #     - ./db:/home/dynamodblocal
  #   environment:
  #     - AWS_ACCESS_KEY_ID=unicorn_user
  #     - AWS_SECRET_ACCESS_KEY=magical_password
  #     - AWS_DEFAULT_REGION=ap-southeast-1
  #   depends_on:
  #     - dynamodb_local
  # dynamodb_seeder:
  #   image: banst/awscli:1.18.76
  #   container_name: app-dynamodb_seeder
  #   working_dir: /home/dynamodblocal
  #   command: dynamodb batch-write-item --request-items file://seed.json --endpoint-url http://dynamodb:8000
  #   volumes:
  #     - ./db:/home/dynamodblocal
  #   environment:
  #     - AWS_ACCESS_KEY_ID=unicorn_user
  #     - AWS_SECRET_ACCESS_KEY=magical_password
  #     - AWS_DEFAULT_REGION=ap-southeast-1
  #   depends_on:
  #     - dynamodb_migrator
  #     - dynamodb_local
  #   restart: on-failure
